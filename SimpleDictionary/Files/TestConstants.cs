//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Версия: A.8 от 14.03.2013 11:01:00, автор: Krouglov
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data.Linq;
using System.Linq;


namespace Constants
{

    #region Autogenerated. Do not change this code!


    /// <summary>
    /// Утилиты доступа к словарю
    /// </summary>
    public static class SDRepository
    {

        /// <summary>
        /// Получить значения словарного параметра
        /// </summary>
        /// <param name="ConnectionString">Строка подключения к БД</param>
        /// <param name="SD">Словарный идентификатор параметра</param>
        /// <returns>Объект типа DictionaryParameter</returns>
        public static DictionaryParameter GetParameter(string ConnectionString, int SD)
        {
            using (var dc = new DataContext(ConnectionString))
            {
                const string sql = "SELECT SD, CurrentN, Name, Description, SortN, IntValue, FloatValue, StringValue, DateValue, MultiValue, MemoValue " +
                    "FROM SimpleDictionary WHERE IsDeleted = 0 AND SD = {0}";
                var res = dc.ExecuteQuery<DictionaryParameter>(sql, SD);
                return res.FirstOrDefault();
            }
        }


        /// <summary>
        /// Получить список параметров из словаря
        /// </summary>
        /// <param name="ConnectionString">Строка подключения к БД</param>
        /// <param name="SD">Идентификатор словаря</param>
        /// <returns>Объект типа DictionaryParameter</returns>
        public static IEnumerable<DictionaryParameter> GetDictionary(string ConnectionString, int SD)
        {
            using (var dc = new DataContext(ConnectionString))
            {
                const string sql = "SELECT SD, CurrentN, Name, Description, SortN, IntValue, FloatValue, StringValue, DateValue, MultiValue, MemoValue " +
                    "FROM SimpleDictionary WHERE IsDeleted = 0 AND ParentSD = {0}";
                return new List<DictionaryParameter>(dc.ExecuteQuery<DictionaryParameter>(sql, SD));
            }
        }
    }


    /// <summary>
    /// Словарный параметр
    /// </summary>
    public class DictionaryParameter
    {
        public int SD { get; set; }
        public int CurrentN { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public int SortNumber { get; set; }
        public int? IntValue { get; set; }
        public float? FloatValue { get; set; }
        public string StringValue { get; set; }
        public DateTime? DateValue { get; set; }
        public string MultiValue { get; set; }
        public string MemoValue { get; set; }
    }


    /// <summary>
    /// Список всех словарей
    /// </summary>
    public struct Dictionaries
    {

        ///<summary> Словарь типов данных </summary>
        public const int DataTypesList = 12;
    }


    /// <summary>
    /// Словарь типов данных
    /// </summary>
    public enum DataTypeEnum
    {

        ///<summary> Однострочный текст </summary>
        TextLine = 1,

        ///<summary> Целое число </summary>
        Integer = 2,

        ///<summary> Вещественное число </summary>
        Float = 3,

        ///<summary> Дата </summary>
        Date = 4,

        ///<summary> Многострочный текст </summary>
        TextMultyLine = 5,

        ///<summary> Выпадающий список </summary>
        Lookup = 6,

        ///<summary> Флаг </summary>
        Boolean = 7,

        ///<summary> Дата/Время </summary>
        DateTime = 8,

        ///<summary> Поле выбора </summary>
        SelectBox = 9
    }


    /// <summary>
    /// Словарь типов данных
    /// </summary>
    public struct DataTypeInt
    {

        ///<summary> Однострочный текст </summary>
        public const int TextLine = 1;

        ///<summary> Целое число </summary>
        public const int Integer = 2;

        ///<summary> Вещественное число </summary>
        public const int Float = 3;

        ///<summary> Дата </summary>
        public const int Date = 4;

        ///<summary> Многострочный текст </summary>
        public const int TextMultyLine = 5;

        ///<summary> Выпадающий список </summary>
        public const int Lookup = 6;

        ///<summary> Флаг </summary>
        public const int Boolean = 7;

        ///<summary> Дата/Время </summary>
        public const int DateTime = 8;

        ///<summary> Поле выбора </summary>
        public const int SelectBox = 9;
    }

    #endregion Autogenerated. Do not change this code!

}
