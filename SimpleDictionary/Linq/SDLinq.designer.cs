#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.296
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SimpleDictionary.Linq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SupportDB")]
	public partial class SDLinqDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertSimpleDictionary(SimpleDictionary instance);
    partial void UpdateSimpleDictionary(SimpleDictionary instance);
    partial void DeleteSimpleDictionary(SimpleDictionary instance);
    #endregion
		
		public SDLinqDataContext() : 
				base(global::SimpleDictionary.Properties.Settings.Default.DBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SDLinqDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SDLinqDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SDLinqDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SDLinqDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<SimpleDictionary> SimpleDictionary
		{
			get
			{
				return this.GetTable<SimpleDictionary>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SimpleDictionary")]
	public partial class SimpleDictionary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SD;
		
		private System.Nullable<char> _RecType;
		
		private System.Nullable<int> _ParentSD;
		
		private int _CurrentN;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<int> _SortN;
		
		private System.Nullable<int> _IntValue;
		
		private System.Nullable<double> _FloatValue;
		
		private string _StringValue;
		
		private System.Nullable<System.DateTime> _DateValue;
		
		private string _MultiValue;
		
		private string _MemoValue;
		
		private string _Comment;
		
		private bool _IsDeleted;
		
		private System.Nullable<System.DateTime> _CreationDate;
		
		private System.Nullable<System.DateTime> _ChangeDate;
		
		private EntitySet<SimpleDictionary> _SimpleDictionary2;
		
		private EntityRef<SimpleDictionary> _SimpleDictionary1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSDChanging(int value);
    partial void OnSDChanged();
    partial void OnRecTypeChanging(System.Nullable<char> value);
    partial void OnRecTypeChanged();
    partial void OnParentSDChanging(System.Nullable<int> value);
    partial void OnParentSDChanged();
    partial void OnCurrentNChanging(int value);
    partial void OnCurrentNChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSortNChanging(System.Nullable<int> value);
    partial void OnSortNChanged();
    partial void OnIntValueChanging(System.Nullable<int> value);
    partial void OnIntValueChanged();
    partial void OnFloatValueChanging(System.Nullable<double> value);
    partial void OnFloatValueChanged();
    partial void OnStringValueChanging(string value);
    partial void OnStringValueChanged();
    partial void OnDateValueChanging(System.Nullable<System.DateTime> value);
    partial void OnDateValueChanged();
    partial void OnMultiValueChanging(string value);
    partial void OnMultiValueChanged();
    partial void OnMemoValueChanging(string value);
    partial void OnMemoValueChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnCreationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreationDateChanged();
    partial void OnChangeDateChanging(System.Nullable<System.DateTime> value);
    partial void OnChangeDateChanged();
    #endregion
		
		public SimpleDictionary()
		{
			this._SimpleDictionary2 = new EntitySet<SimpleDictionary>(new Action<SimpleDictionary>(this.attach_SimpleDictionary2), new Action<SimpleDictionary>(this.detach_SimpleDictionary2));
			this._SimpleDictionary1 = default(EntityRef<SimpleDictionary>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SD", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SD
		{
			get
			{
				return this._SD;
			}
			set
			{
				if ((this._SD != value))
				{
					this.OnSDChanging(value);
					this.SendPropertyChanging();
					this._SD = value;
					this.SendPropertyChanged("SD");
					this.OnSDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecType", DbType="Char(1)")]
		public System.Nullable<char> RecType
		{
			get
			{
				return this._RecType;
			}
			set
			{
				if ((this._RecType != value))
				{
					this.OnRecTypeChanging(value);
					this.SendPropertyChanging();
					this._RecType = value;
					this.SendPropertyChanged("RecType");
					this.OnRecTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentSD", DbType="Int")]
		public System.Nullable<int> ParentSD
		{
			get
			{
				return this._ParentSD;
			}
			set
			{
				if ((this._ParentSD != value))
				{
					if (this._SimpleDictionary1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentSDChanging(value);
					this.SendPropertyChanging();
					this._ParentSD = value;
					this.SendPropertyChanged("ParentSD");
					this.OnParentSDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentN", DbType="Int NOT NULL")]
		public int CurrentN
		{
			get
			{
				return this._CurrentN;
			}
			set
			{
				if ((this._CurrentN != value))
				{
					this.OnCurrentNChanging(value);
					this.SendPropertyChanging();
					this._CurrentN = value;
					this.SendPropertyChanged("CurrentN");
					this.OnCurrentNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(200)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortN", DbType="Int")]
		public System.Nullable<int> SortN
		{
			get
			{
				return this._SortN;
			}
			set
			{
				if ((this._SortN != value))
				{
					this.OnSortNChanging(value);
					this.SendPropertyChanging();
					this._SortN = value;
					this.SendPropertyChanged("SortN");
					this.OnSortNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IntValue", DbType="Int")]
		public System.Nullable<int> IntValue
		{
			get
			{
				return this._IntValue;
			}
			set
			{
				if ((this._IntValue != value))
				{
					this.OnIntValueChanging(value);
					this.SendPropertyChanging();
					this._IntValue = value;
					this.SendPropertyChanged("IntValue");
					this.OnIntValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FloatValue", DbType="Float")]
		public System.Nullable<double> FloatValue
		{
			get
			{
				return this._FloatValue;
			}
			set
			{
				if ((this._FloatValue != value))
				{
					this.OnFloatValueChanging(value);
					this.SendPropertyChanging();
					this._FloatValue = value;
					this.SendPropertyChanged("FloatValue");
					this.OnFloatValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StringValue", DbType="VarChar(50)")]
		public string StringValue
		{
			get
			{
				return this._StringValue;
			}
			set
			{
				if ((this._StringValue != value))
				{
					this.OnStringValueChanging(value);
					this.SendPropertyChanging();
					this._StringValue = value;
					this.SendPropertyChanged("StringValue");
					this.OnStringValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateValue", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> DateValue
		{
			get
			{
				return this._DateValue;
			}
			set
			{
				if ((this._DateValue != value))
				{
					this.OnDateValueChanging(value);
					this.SendPropertyChanging();
					this._DateValue = value;
					this.SendPropertyChanged("DateValue");
					this.OnDateValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MultiValue", DbType="VarChar(1000)")]
		public string MultiValue
		{
			get
			{
				return this._MultiValue;
			}
			set
			{
				if ((this._MultiValue != value))
				{
					this.OnMultiValueChanging(value);
					this.SendPropertyChanging();
					this._MultiValue = value;
					this.SendPropertyChanged("MultiValue");
					this.OnMultiValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemoValue", DbType="VarChar(4000)")]
		public string MemoValue
		{
			get
			{
				return this._MemoValue;
			}
			set
			{
				if ((this._MemoValue != value))
				{
					this.OnMemoValueChanging(value);
					this.SendPropertyChanging();
					this._MemoValue = value;
					this.SendPropertyChanged("MemoValue");
					this.OnMemoValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(1000)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangeDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> ChangeDate
		{
			get
			{
				return this._ChangeDate;
			}
			set
			{
				if ((this._ChangeDate != value))
				{
					this.OnChangeDateChanging(value);
					this.SendPropertyChanging();
					this._ChangeDate = value;
					this.SendPropertyChanged("ChangeDate");
					this.OnChangeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SimpleDictionary_SimpleDictionary", Storage="_SimpleDictionary2", ThisKey="SD", OtherKey="ParentSD")]
		public EntitySet<SimpleDictionary> SimpleDictionary2
		{
			get
			{
				return this._SimpleDictionary2;
			}
			set
			{
				this._SimpleDictionary2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SimpleDictionary_SimpleDictionary", Storage="_SimpleDictionary1", ThisKey="ParentSD", OtherKey="SD", IsForeignKey=true)]
		public SimpleDictionary SimpleDictionary1
		{
			get
			{
				return this._SimpleDictionary1.Entity;
			}
			set
			{
				SimpleDictionary previousValue = this._SimpleDictionary1.Entity;
				if (((previousValue != value) 
							|| (this._SimpleDictionary1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SimpleDictionary1.Entity = null;
						previousValue.SimpleDictionary2.Remove(this);
					}
					this._SimpleDictionary1.Entity = value;
					if ((value != null))
					{
						value.SimpleDictionary2.Add(this);
						this._ParentSD = value.SD;
					}
					else
					{
						this._ParentSD = default(Nullable<int>);
					}
					this.SendPropertyChanged("SimpleDictionary1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SimpleDictionary2(SimpleDictionary entity)
		{
			this.SendPropertyChanging();
			entity.SimpleDictionary1 = this;
		}
		
		private void detach_SimpleDictionary2(SimpleDictionary entity)
		{
			this.SendPropertyChanging();
			entity.SimpleDictionary1 = null;
		}
	}
}
#pragma warning restore 1591
